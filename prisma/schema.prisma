generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String?    @unique
  phoneNumber        String     @unique
  name               String?
  profileImage       String?
  role               Role       @default(BUYER)
  stripeCustomerId   String?    @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Broker             Broker?
  Buyer              Buyer?
  Developer          Developer?
  Owner              Owner?
  payments           Payment[]
  projects           Project[]  @relation("DeveloperProjects")
  brokeredProperties Property[] @relation("BrokerProperties")
  ownedProperties    Property[] @relation("PropertyOwner")

  @@index([phoneNumber])
}

model Buyer {
  id       String  @id @default(uuid()) @map("user_id")
  name     String?
  lastName String?
  user     User    @relation(fields: [id], references: [id])
}

model Developer {
  id           String  @id @default(uuid()) @map("user_id")
  isLicensed   Boolean
  hasWafi      Boolean
  acceptsBanks Boolean
  companyName  String?
  user         User    @relation(fields: [id], references: [id])
}

model Owner {
  id          String  @id @default(uuid()) @map("user_id")
  companyName String?
  user        User    @relation(fields: [id], references: [id])
}

model Broker {
  id            String  @id @default(uuid()) @map("user_id")
  isLicensed    Boolean
  licenseNumber String
  user          User    @relation(fields: [id], references: [id])
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  amount                Float
  currency              String
  status                PaymentStatus
  stripePaymentIntentId String        @unique
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  User          @relation(fields: [userId], references: [id])
}

model Media {
  id         String    @id @default(uuid())
  type       MediaType
  url        String
  key        String
  propertyId String?
  projectId  String?
  createdAt  DateTime  @default(now())
  project    Project?  @relation(fields: [projectId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([projectId])
}

model Property {
  id                    String               @id @default(uuid())
  title                 String
  description           String
  price                 Decimal
  currency              String
  downPaymentPercentage Int
  cashBackPercentage    Int?
  city                  String
  address               String
  space                 Int
  numberOfLivingRooms   Int
  numberOfRooms         Int
  numberOfKitchen       Int
  numberOfWC            Int
  numberOfFloors        Int
  streetWidth           Int
  age                   Int
  facing                FacingDirection
  type                  PropertyType
  category              PropertyCategory
  unitStatus            UnitStatus
  infrastructureItems   InfrastructureItem[]
  locationLat           Float
  locationLng           Float
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  ownerId               String
  brokerId              String?
  projectId             String?
  media                 Media[]
  broker                User?                @relation("BrokerProperties", fields: [brokerId], references: [id])
  owner                 User                 @relation("PropertyOwner", fields: [ownerId], references: [id])
  project               Project?             @relation(fields: [projectId], references: [id])

  @@index([locationLat, locationLng])
}

model NearbyPlace {
  id        String  @id @default(uuid())
  name      String
  distance  Float
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Project {
  id                  String               @id @default(uuid())
  developerId         String
  name                String
  description         String
  city                String
  type                PropertyType
  category            PropertyCategory
  infrastructureItems InfrastructureItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  media               Media[]
  nearbyPlaces        NearbyPlace[]
  developer           User                 @relation("DeveloperProjects", fields: [developerId], references: [id])
  properties          Property[]

  @@index([developerId])
}

enum Role {
  BUYER
  DEVELOPER
  OWNER
  BROKER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum PropertyType {
  residential
  commercial
}

enum PropertyCategory {
  palace
  villa
  duplex
  singleStoryHouse
  apartment
  land
}

enum UnitStatus {
  available
  sold
  reserved
  rented
}

enum MediaType {
  video
  virtualTour
  threeD
  photo
}

enum InfrastructureItem {
  waterNetwork
  sewageSystem
  electricityNetwork
  fiberOptics
  parking
  elevator
  fiberOpticExtension
  basement
  insulationBlock
  pool
  playground
}

enum FacingDirection {
  north
  south
  east
  west
  northEast
  northWest
  southEast
  southWest
}
