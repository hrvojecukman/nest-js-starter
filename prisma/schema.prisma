generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(uuid())
  email              String?                 @unique
  phoneNumber        String                  @unique
  name               String
  profileImage       String?
  password           String? // For admin login
  role               Role                    @default(BUYER)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  Broker             Broker?
  Buyer              Buyer?
  Developer          Developer?
  Owner              Owner?
  payments           Payment[]
  projects           Project[]               @relation("DeveloperProjects")
  brokeredProperties Property[]              @relation("BrokerProperties")
  ownedProperties    Property[]              @relation("PropertyOwner")
  subscription       Subscription?
  transactions       Transaction[]
  notifications      NotificationRecipient[]

  @@index([phoneNumber])
  @@index([email])
}

model Buyer {
  id       String  @id @default(uuid()) @map("user_id")
  lastName String?
  user     User    @relation(fields: [id], references: [id])
}

model Developer {
  id String @id @default(uuid()) @map("user_id")

  // Company info
  companyName        String
  entityType         EntityType
  developerCity      String
  propertyType       PropertyType
  annualProjectCount AnnualProjectCount
  totalNumberOfUnits TotalNumberOfUnits

  // Representative info
  representativeName     String
  representativePhone    String
  representativePosition String
  representativeEmail    String

  // Social/Contact
  websiteUrl         String?
  xAccountUrl        String?
  snapchatAccountUrl String?
  linkedinAccountUrl String?

  // Existing fields (made optional)
  licenseNumber String?
  hasWafi       Boolean?
  acceptsBanks  Boolean?
  description   String?
  location      String?

  // Relations
  documents DeveloperDocument[]
  user      User                @relation(fields: [id], references: [id])
}

model DeveloperDocument {
  id           String                @id @default(uuid())
  developerId  String
  developer    Developer             @relation(fields: [developerId], references: [id])
  mediaId      String
  media        Media                 @relation(fields: [mediaId], references: [id])
  documentType DeveloperDocumentType

  @@unique([developerId, mediaId])
}

model Owner {
  id                                String       @id @default(uuid()) @map("user_id")
  lastName                          String
  doesOwnProperty                   Boolean
  propertyType                      PropertyType
  doesOwnPropertyWithElectronicDeed Boolean
  purposeOfRegistration             Int
  developerPartnership              Int
  lookingForDeveloperPartnership    Boolean
  user                              User         @relation(fields: [id], references: [id])
}

model Broker {
  id                          String       @id @default(uuid()) @map("user_id")
  lastName                    String
  licenseNumber               String
  description                 String?
  propertyType                PropertyType
  expectedNumberOfAdsPerMonth Int
  hasExecutedSalesTransaction Boolean
  useDigitalPromotion         Boolean
  wantsAdvertising            Boolean
  user                        User         @relation(fields: [id], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  amount    Float
  currency  String
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  currency      String         @default("USD")
  availableTo   Role[]
  billingPeriod BillingPeriod
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  transactions  Transaction[]
}

model Subscription {
  id           String             @id @default(uuid())
  userId       String             @unique
  planId       String
  startedAt    DateTime           @default(now())
  expiresAt    DateTime
  autoRenew    Boolean            @default(true)
  status       SubscriptionStatus
  platform     Platform           @default(manual)
  // Simple, abstract fields
  externalId   String? // Any external reference (platform-agnostic)
  metadata     Json? // Flexible storage for platform-specific data
  user         User               @relation(fields: [userId], references: [id])
  plan         SubscriptionPlan   @relation(fields: [planId], references: [id])
  transactions Transaction[] // One-to-many relationship
}

model Transaction {
  id             String            @id @default(uuid())
  userId         String
  type           TransactionType // subscription, purchase, refund, etc.
  amount         Float
  currency       String            @default("USD")
  status         TransactionStatus
  externalId     String? // Platform transaction ID
  metadata       Json? // Platform-specific data
  createdAt      DateTime          @default(now())
  user           User              @relation(fields: [userId], references: [id])
  subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  plan           SubscriptionPlan? @relation(fields: [planId], references: [id])
  planId         String?
}

model Media {
  id                String              @id @default(uuid())
  type              MediaType
  url               String
  key               String
  propertyId        String?
  projectId         String?
  createdAt         DateTime            @default(now())
  name              String?
  project           Project?            @relation(fields: [projectId], references: [id])
  property          Property?           @relation(fields: [propertyId], references: [id])
  DeveloperDocument DeveloperDocument[]

  @@index([propertyId])
  @@index([projectId])
}

model Property {
  id                    String               @id @default(uuid())
  title                 String
  description           String
  price                 Decimal
  currency              String
  downPaymentPercentage Int
  cashBackPercentage    Int?
  discountPercentage    Int?
  city                  String
  address               String
  space                 Int
  numberOfLivingRooms   Int
  numberOfRooms         Int
  numberOfKitchen       Int
  numberOfWC            Int
  numberOfFloors        Int
  streetWidth           Int
  age                   Int
  facing                FacingDirection
  type                  PropertyType
  category              PropertyCategory
  unitStatus            UnitStatus
  infrastructureItems   InfrastructureItem[]
  locationLat           Float
  locationLng           Float
  s2L6                  String               @db.VarChar(32)
  s2L8                  String               @db.VarChar(32)
  s2L10                 String               @db.VarChar(32)
  s2L12                 String               @db.VarChar(32)
  s2L16                 String               @db.VarChar(32)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  ownerId               String
  brokerId              String?
  projectId             String?
  media                 Media[]
  broker                User?                @relation("BrokerProperties", fields: [brokerId], references: [id])
  owner                 User                 @relation("PropertyOwner", fields: [ownerId], references: [id])
  project               Project?             @relation(fields: [projectId], references: [id])

  @@index([locationLat, locationLng])
  @@index([s2L6])
  @@index([s2L8])
  @@index([s2L10])
  @@index([s2L12])
  @@index([s2L16])
}

model NearbyPlace {
  id        String  @id @default(uuid())
  name      String
  distance  Float
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Project {
  id                  String               @id @default(uuid())
  developerId         String
  name                String
  description         String
  city                String
  type                PropertyType
  category            PropertyCategory
  infrastructureItems InfrastructureItem[]
  locationLat         Float
  locationLng         Float
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  media               Media[]
  nearbyPlaces        NearbyPlace[]
  timeline            ProjectTimeline[]
  developer           User                 @relation("DeveloperProjects", fields: [developerId], references: [id])
  properties          Property[]

  @@index([developerId])
}

model ProjectTimeline {
  id           String              @id @default(uuid())
  projectId    String
  type         ProjectTimelineType
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  isInProgress Boolean             @default(false)
  isCompleted  Boolean             @default(false)
  progress     Int? // 0-100 percentage
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([type])
  @@index([startDate])
  @@index([isInProgress, isCompleted])
}

enum Role {
  BUYER
  DEVELOPER
  OWNER
  BROKER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum PropertyType {
  residential
  commercial
  residentialAndCommercial
}

enum PropertyCategory {
  palace
  villa
  duplex
  singleStoryHouse
  apartment
  land
}

enum UnitStatus {
  available
  sold
  reserved
  rented
}

enum MediaType {
  video
  virtualTour
  threeD
  photo
  document
}

enum InfrastructureItem {
  waterNetwork
  sewageSystem
  electricityNetwork
  fiberOptics
  parking
  elevator
  fiberOpticExtension
  basement
  insulationBlock
  pool
  playground
}

enum FacingDirection {
  north
  south
  east
  west
  northEast
  northWest
  southEast
  southWest
}

enum ProjectTimelineType {
  start
  underConstruction
  completed
}

enum DeveloperDocumentType {
  commercialRegistration
  taxCertificate
  valBrokerageLicense
  realEstateDevelopmentLicense
  officialCompanyLogo
}

enum AnnualProjectCount {
  from1To4
  from5To9
  moreThan10
}

enum TotalNumberOfUnits {
  from1To15
  from16To30
  moreThan30
}

enum EntityType {
  company
  institution
}

enum SubscriptionStatus {
  active
  expired
  canceled
  pending
}

enum BillingPeriod {
  monthly
  yearly
}

enum PaymentProvider {
  stripe
  manual
  unknown
}

enum Platform {
  ios
  android
  web
  manual
}

enum TransactionType {
  subscription_start
  subscription_renewal
  subscription_cancellation
  one_time_purchase
  refund
  credit
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
}

// Notifications
model Notification {
  id         String                  @id @default(uuid())
  title      String
  body       String
  data       Json?
  category   String?
  createdAt  DateTime                @default(now())
  recipients NotificationRecipient[]

  @@index([createdAt])
}

model NotificationRecipient {
  id             String    @id @default(uuid())
  notificationId String
  userId         String
  readAt         DateTime?
  isArchived     Boolean   @default(false)
  createdAt      DateTime  @default(now())

  notification Notification @relation(fields: [notificationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([notificationId, userId])
  @@index([userId, readAt])
  @@index([userId, isArchived])
}
